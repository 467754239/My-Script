git的后悔药

场景一：文件在工作区（当前编辑的目录），还没有git add到缓存区，发现错误，需要回滚 
        git checkout -- readme.txt   如果是rm readme.txt 误删，同样可以用这条命令救回来
场景二：文件已经git add到了缓存区（.git/index），发现错误需要回滚
        git reset HEAD readme.txt    从缓存区拉回工作区
        git checkout -- readme.txt   在回到场景一，将工作区的修改回滚

场景三：文件不仅git add提交到了缓冲区,而且git commit 到了分支（.git/HEAD）需要回滚
        HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令

        git reset --hard commit_id。

        穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
        $ git log         # 查看gitcommit的记录
        commit bf69c95fe2073237cc4744dc1bce8b26df18e7ba
        Author: liuziping <liuziping@douban.com>
        Date:   Sun Jun 14 17:20:20 2015 +0800

            test for https

        commit d5a861fff73994cd2e780635bad546c65e491de6
        Author: liuziping <liuziping@douban.com>
        Date:   Sun Jun 14 16:56:49 2015 +0800

            add for vimrc
         $git reset --hard d5a861fff73    #返回到之前的版本

        回到过去之后，又要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
        $git reflog                                #又后悔了，看刚刚那次时光穿梭的记录
        d5a861f HEAD@{0}: d5a861fff73: updating HEAD
        bf69c95 HEAD@{1}: commit: test for https

        $git reset --hard bf69c95     #再次回到原来的状态

场景四：文件git add 并git commit 并且git push到远程，回滚远程仓库 
        这个是重点要说的内容，过程比本地回滚要复杂
        应用场景：自动部署系统发布后发现问题，需要回滚到某一个commit，再重新发布
        原理：先将本地分支退回到某个commit，删除远程分支，再重新push本地分支
        操作步骤：
        1、git checkout dev
        2、git pull
        3、git branch dev_backup //备份一下这个分支当前的情况
        4、git reset --hard the_commit_id //把dev本地回滚到the_commit_id
        5、git push origin :dev //删除远程 the_branch    等同于git push origin --delete dev
        6、git push orig in dev //用回滚后的本地分支重新建立远程分支

