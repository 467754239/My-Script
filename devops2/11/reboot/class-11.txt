

第十一天



一：课程目标

0: mysql抽象类的讲解实现(上周遗留)

1: API认证认证——装饰器
2: jsonrpc demo 
3: API对权限表的操作——权限表最简单，没有依赖,pubulic+api+测试用例跑通
4: API角色表的操作——依赖权限表
5: API用户表的操作——依赖角色表
6: 前端套页面




二：jsonrpc+flask web ＋jquery工作流

1：通过按钮弹出输入表单，然后可以自行输入内容（添加和更新数据会有按钮）
2：通过$('js选择器').serialize()函数，获取到输入的表单内容
3：通过ajax发起异步请求，把数据和请求的method传给web端的addapi这个方法。这个方法会获取到ajax提交过来的数据，并加工成后端jsonrpc api所需要的格式
4：web端发起一个requests请求给后端jsonrpc, jsonrpc操作数据库，完成需求，并将结果返回给前端flask web
5：flask web再把结果返回给前端jquery


三：技术点：

1： id2name(以用户和角色为例子)
        a: 查出用户的信息，尤其是r_id(1,2,3)
        b: 查出角色信息，尤其是id,name
        c：通过r_id和角色id进行对比，一致则进行替换，不一致跳过


四：权限系统的组成部分

1: 需要管理的功能分两块: 基础设施（用户,角色,权限,cmdb) 功能模块（git 代码发布，监控，第三方API.....）
2: sa角色有两层身份： 上帝模式(可独立出来)，管理基础设施；凡人模式：操作功能模块
3: web和API端基础设施管理的权限验证都基于角色，即判断role是否为sa
4: 功能模块则一视同仁，判断权限是否匹配。



已知bug：
用户表关联角色表，角色表中删除数据,用户表中还保存已删除的角色ID
角色表关联权限表，权限表中删除数据 角色表中海保存已删除的权限ID

解决方案：
技术层面：在代码读取关联表数据时，判断依赖表中ID是否存在，只遍历存在的ID2name，保证程序不保错，显示结果正常
逻辑层面：不允许删除管理表数据 
遗留问题：数据库存的r_id，p_id是脏数据



第十二天


一： 课程目标：

0:   前一天知识点回顾
1：  发布系统思想讲解及项目文档完善
2：  项目管理代码编写
3:   测试发布代码编写
4:   申请发布及处理代码编写
5:   发布纪录代码编写

备注： 最后一个项目尝试新的授课方式——git协作开发（课程最后一天，学员基本具备编码能力）
1:前一周，讲清楚项目思路和用到的知识点，写好项目文档
2:在项目文档中将功能模块细分，分配给学员自己编写，
3:学员通过git利用周一到周五业余时间协作开发,期间解决问题 合并代码让大家积极参与。 
4:周日课上讲解优化代码
5:结课

作业： 将之前写的cmdb  zabbix 模块换成新的ui



开发感悟

开发前准备
1：根据需求画流程图，思维导图
2：根据需求写项目文档（技术点调研）
3：根据项目文档写代码


开发后回顾
1：对照需求演示功能
2：对照项目文档review代码,并改进优化

